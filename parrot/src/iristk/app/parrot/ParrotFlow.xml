<?xml version="1.0" encoding="utf-8"?>
<flow name="ParrotFlow" package="iristk.app.parrot" 
	initial="Init" xmlns:this="iristk.app.parrot.ParrotFlow" xmlns="iristk.flow" 
	xmlns:p="iristk.flow.param" xmlns:agent="iristk.situated.SystemAgentFlow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="iristk.flow flow.xsd iristk.situated.SystemAgentFlow SystemAgentFlow.xsd">
	
	<param name="initialParameters" type="Record"/>
	<param name="agent" type="iristk.situated.SystemAgentFlow"/>
	
	<var name="originSkill" type="String" value="'iristk.furhat.server.IdleSkill'"/>
	<var name="system" type="iristk.situated.SystemAgent" value="agent.getSystemAgent()"/> 
	
	<state id="Init">
		<onentry>
			<if cond="system.hasUsers()">
				<agent:attendRandom/>
			<else/>
				<agent:attendNobody/>
			</if>
		    <goto state="Dialog"/>
		</onentry>
	</state>
	
	<state id="HotStart" public="true">
		<onentry>
			<if cond="initialParameters != null and initialParameters?:originSkill">
		        <exec> 
		            originSkill = initialParameters.getString("originSkill");
		        </exec>
            </if>
			<agent:say>say something then</agent:say>
			<goto state="Dialog"/>
		</onentry>
	</state>
	
	<state id="Dialog">
		<onentry>
			<agent:listen/>
			<reentry/>
		</onentry>
		
		<onevent name="sense.user.speech.start" cond="system.isAttending(event) and eq(event:speakers, 1)">
			<agent:gesture name="'smile'"/>
		</onevent>
		
		<onevent name="sense.user.speak.multi">
			<random>
				<agent:say>Hey humans! one at a time</agent:say>
				<agent:say>Ah! Shut up you guys!</agent:say>
				<agent:say>Too Loud! You are making it too loud!</agent:say>
				<agent:say>Don't speak at the same time</agent:say>
			</random>
		</onevent>
		
		<!-- We don't want to bother about multi-party dialogue in this example, hence we throw a normal speak event when we get a side speak event -->
		<onevent name="sense.user.speak.side">
			<send event="sense.user.speak" copy="event"/>
		</onevent>
		
        <onevent name="sense.user.speak" cond="event?:sem:goodbye">
            <goto state="Exit"/>
        </onevent>	
		
		<onevent name="sense.user.speak" cond="!eq(event:text,'NO_MATCH')">
		    <agent:say><expr>event:text</expr></agent:say>
		    <reentry/>
		</onevent>
		
		<onevent name="sense.user.silence" cond="!system.getCurrentUser().isNobody()">
			<random>
				<agent:say>Speak or I run away</agent:say>
				<agent:say>I have all day to wait!</agent:say>
				<agent:say>Are you going to talk or what?</agent:say>
				<agent:say>Speak or I will forever hold my peace</agent:say>
			</random>
		    <reentry/>
		</onevent>
		
		<onevent name="sense.user.leave" cond="system.isAttending(event)">
			<if cond="system.hasUsers()">
				<agent:attendRandom/>
				<reentry/>
			<else />
				<goto state="Exit"/>
			</if>
		</onevent>
		
		<onevent name="sense.user.enter">
			<agent:attend target="event:user"/>
			<agent:listen/>
		</onevent>
	</state>
	
	<state id="Exit">
		<onentry>
			<agent:say> Okay, goodbye.</agent:say>
			<if cond="initialParameters != null">
            	<send event="action.skill" p:entry="originSkill"/>
        	<else/>
        		<goto state="Init"/>
        	</if>
		</onentry>
	</state>
	
	
	
</flow>